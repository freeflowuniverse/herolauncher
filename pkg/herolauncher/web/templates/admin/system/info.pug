extends ../layout

block content
  article.system-info
    header
      h2.title System Information
      p(class='description text-muted') Overview of system resources and configuration
    
    .grid(style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem;")
      div
        article.hardware-info
          header
            h3#hardware-title Hardware
          
          table.hardware-stats(class="table table-striped" up-poll="/admin/system/hardware-stats" up-target=".hardware-stats" up-interval="1000")
            tbody
              tr
                th(scope='row') CPU
                td {{.system.hardware.cpu}}
              tr
                th(scope='row') Memory
                td {{.system.hardware.memory}}
              tr
                th(scope='row') Disk
                td {{.system.hardware.disk}}
              tr
                th(scope='row') Network
                td(style='white-space: pre-line;') {{.system.hardware.network}}
          
          div#network-chart(style="width: 100%; height: 300px; margin-top: 20px;")
      
      div
        article.software-info
          header
            h3#software-title Software
          
          table(class="table table-bordered" data-type="software-info")
            tbody
              tr
                th(scope='row') OS
                td {{.system.software.os}}
              tr
                th(scope='row') HeroLauncher
                td {{.system.software.herolauncher}}
              tr
                th(scope='row') Uptime
                td {{.system.software.uptime}}
      

block scripts
  script.
    // Initialize the network chart
    var chartDom = document.getElementById('network-chart');
    var myChart = echarts.init(chartDom, {
      renderer: 'canvas',
      useDirtyRect: false,
      backgroundColor: '#1e2124' // Match the dark background color of the UI
    });
    var option;

    // Data arrays for the chart
    var timestamps = [];
    var uploadData = [];
    var downloadData = [];
    
    // Maximum number of data points to show
    var maxDataPoints = 60;

    // Function to parse network speed from string to number (e.g., "10.50Mbps" -> 10.50)
    function parseNetworkSpeed(speedStr) {
      if (!speedStr || speedStr === "Unknown") return 0;
      return parseFloat(speedStr.replace('Mbps', ''));
    }

    // Function to update the chart with new data
    function updateNetworkChart(upSpeed, downSpeed) {
      var now = new Date();
      var timeStr = now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();
      
      // Add new data point
      timestamps.push(timeStr);
      uploadData.push(parseNetworkSpeed(upSpeed));
      downloadData.push(parseNetworkSpeed(downSpeed));
      
      // Remove old data if we have more than maxDataPoints
      if (timestamps.length > maxDataPoints) {
        timestamps.shift();
        uploadData.shift();
        downloadData.shift();
      }
      
      // Update chart option
      option = {
        title: {
          text: 'Network Traffic',
          textStyle: {
            color: '#fff'
          }
        },
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'cross',
            label: {
              backgroundColor: '#6a7985'
            }
          }
        },
        legend: {
          data: ['Upload', 'Download'],
          textStyle: {
            color: '#fff'
          }
        },
        toolbox: {
          feature: {
            saveAsImage: {}
          }
        },
        grid: {
          left: '3%',
          right: '4%',
          bottom: '3%',
          containLabel: true
        },
        xAxis: [
          {
            type: 'category',
            boundaryGap: false,
            data: timestamps,
            axisLabel: {
              color: '#fff'
            }
          }
        ],
        yAxis: [
          {
            type: 'value',
            name: 'Mbps',
            nameTextStyle: {
              color: '#fff'
            },
            axisLabel: {
              color: '#fff'
            }
          }
        ],
        series: [
          {
            name: 'Upload',
            type: 'line',
            stack: 'Total',
            areaStyle: {},
            emphasis: {
              focus: 'series'
            },
            data: uploadData,
            itemStyle: {
              color: '#80FFA5'
            }
          },
          {
            name: 'Download',
            type: 'line',
            stack: 'Total',
            areaStyle: {},
            emphasis: {
              focus: 'series'
            },
            data: downloadData,
            itemStyle: {
              color: '#37A2FF'
            }
          }
        ]
      };
      
      // Apply the updated option
      myChart && myChart.setOption(option);
    }

    // Initial chart setup
    updateNetworkChart('0Mbps', '0Mbps');

    // Function to fetch hardware stats from the JSON API
    function fetchHardwareStats() {
      fetch('/admin/api/hardware-stats')
        .then(response => response.json())
        .then(data => {
          // Update the chart with new data
          updateNetworkChart(data.network.upload + 'Mbps', data.network.download + 'Mbps');
          
          // Schedule the next update
          setTimeout(fetchHardwareStats, 1000);
        })
        .catch(error => {
          console.error('Error fetching hardware stats:', error);
          // Retry after a delay even if there was an error
          setTimeout(fetchHardwareStats, 5000);
        });
    }
    
    // Start fetching hardware stats
    fetchHardwareStats();
    
    // Also update the chart when new hardware stats are loaded via Unpoly
    document.addEventListener('up:fragment:loaded', function(event) {
      if (event.target && event.target.classList.contains('hardware-stats')) {
        // Extract network speeds from the table
        var networkCell = event.target.querySelector('tr:nth-child(4) td');
        if (networkCell) {
          var networkText = networkCell.textContent;
          var upMatch = networkText.match(/Up: ([\d.]+Mbps)/);
          var downMatch = networkText.match(/Down: ([\d.]+Mbps)/);
          
          var upSpeed = upMatch ? upMatch[1] : '0Mbps';
          var downSpeed = downMatch ? downMatch[1] : '0Mbps';
          
          // Update the chart with new data
          updateNetworkChart(upSpeed, downSpeed);
        }
      }
    });

    // Handle window resize
    window.addEventListener('resize', function() {
      myChart && myChart.resize();
    });
