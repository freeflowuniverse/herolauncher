name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: go mod download

      - name: Build for multiple platforms
        run: |
          # Create release directory
          mkdir -p release
          
          # Build for Linux
          GOOS=linux GOARCH=amd64 go build -o release/herolauncher-linux-amd64
          
          # Build for macOS
          GOOS=darwin GOARCH=amd64 go build -o release/herolauncher-darwin-amd64
          
          # Build for Windows
          GOOS=windows GOARCH=amd64 go build -o release/herolauncher-windows-amd64.exe

      - name: Create Release Notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          
          # Generate changelog from git commits since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # If there's no previous tag, use all commits
            CHANGELOG=$(git log --pretty=format:"* %s" $VERSION)
          else
            # Otherwise, use commits since the previous tag
            CHANGELOG=$(git log --pretty=format:"* %s" $PREV_TAG..$VERSION)
          fi
          
          # Create release notes file
          echo "# HeroLauncher $VERSION" > release-notes.md
          echo "" >> release-notes.md
          echo "## Changes" >> release-notes.md
          echo "$CHANGELOG" >> release-notes.md
          
          # Display release notes
          cat release-notes.md

      - name: Create GitHub Release
        run: |
          # Display release info
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Creating release for version: $VERSION"
          echo "Release notes:"
          cat release-notes.md
          
          # List release files
          echo "Release files:"
          ls -la release/
          
          echo "Release creation would happen here in a real workflow"
          echo "This step has been simplified for compatibility"
